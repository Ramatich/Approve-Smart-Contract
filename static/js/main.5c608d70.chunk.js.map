{"version":3,"sources":["utils/conversions.js","utils/marketplace.js","contracts/marketplace_approval.teal","contracts/marketplace_clear.teal","utils/constants.js","components/Cover.jsx","components/utils/Identicon.jsx","components/Wallet.jsx","components/marketplace/AddProduct.jsx","components/marketplace/Product.jsx","components/utils/Loader.jsx","components/utils/Notifications.jsx","components/marketplace/Products.jsx","assets/img/sandwich.jpg","App.js","reportWebVitals.js","index.js"],"names":["base64ToUTF8String","base64String","Buffer","from","toString","utf8ToBase64String","utf8String","truncateAddress","address","slice","length","microAlgosToString","num","BigNumber","shiftedBy","ALGORAND_DECIMALS","toFixed","stringToMicroAlgos","str","toNumber","global","require","Product","constructor","name","image","description","price","sold","appId","owner","this","compileProgram","async","programBytes","TextEncoder","encode","programSource","compileResponse","algodClient","compile","do","Uint8Array","result","createProductAction","senderAddress","product","_product$image","console","log","Error","params","getTransactionParams","fee","algosdk","ALGORAND_MIN_TX_FEE","flatFee","compiledApprovalProgram","approvalProgram","compiledClearProgram","clearProgram","note","marketplaceNote","appArgs","encodeUint64","txn","makeApplicationCreateTxnFromObject","suggestedParams","onComplete","OnApplicationComplete","NoOpOC","numLocalInts","numLocalByteSlices","numLocalBytes","numGlobalInts","numGlobalByteSlices","numGlobalBytes","txId","txID","signedTxn","myAlgoConnect","signTransaction","toByte","sendRawTransaction","blob","confirmedTxn","waitForConfirmation","pendingTransactionInformation","buyProductAction","count","txnArray","makeApplicationCallTxnFromObject","appIndex","makePaymentTxnWithSuggestedParamsFromObject","to","amount","groupID","computeGroupID","i","group","map","tx","deleteProductAction","index","makeApplicationDeleteTxnFromObject","apid","getProductsAction","encodedNote","transactionInfo","indexerClient","searchForTransactions","notePrefix","txType","minRound","products","transaction","transactions","getApplication","push","response","lookupApplications","includeAll","application","deleted","globalState","creator","getField","fieldName","find","state","key","undefined","field","value","bytes","uint","err","config","Algodv2","Indexer","MyAlgoConnect","timeout","Cover","_ref","coverImg","connect","_jsxs","className","children","_jsx","style","maxWidth","src","alt","Button","onClick","variant","Identicon","propTypes","size","PropTypes","number","isRequired","string","AddressIdenticon","rest","width","concat","height","Wallet","symbol","disconnect","_Fragment","Dropdown","Toggle","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","AddProduct","createProduct","setName","useState","setImage","setDescription","setPrice","isFormFilled","useCallback","show","setShow","handleClose","handleShow","Modal","onHide","centered","Header","closeButton","Title","Form","Body","FloatingLabel","controlId","label","Control","type","onChange","e","placeholder","Footer","disabled","buyProduct","deleteProduct","setCount","Col","Card","Badge","bg","objectFit","Text","min","max","Number","Loader","role","Notification","ToastContainer","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","_ref2","DefaultProps","defaultProps","Products","fetchBalance","setProducts","loading","setLoading","getProducts","useEffect","toast","error","data","message","Row","xs","sm","lg","App","setAddress","balance","setBalance","lookupAccountByID","accountAddress","then","_balance","account","catch","Container","fluid","Nav","accounts","_account","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c608d70.chunk.js","sourcesContent":["import {ALGORAND_DECIMALS} from \"./constants\";\n\nimport BigNumber from \"bignumber.js\";\n\nexport const base64ToUTF8String = (base64String) => {\n\n    return Buffer.from(base64String, 'base64').toString(\"utf-8\")\n\n}\n\n\nexport const utf8ToBase64String = (utf8String) => {\n\n    return Buffer.from(utf8String, 'utf8').toString('base64')\n\n}\nexport const truncateAddress = (address) => {\n\n    if (!address) return\n\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 5, address.length);\n\n}\n\n\n// Amounts in microAlgos (e.g. 10500) are shown as algos (e.g. 10.5) in the frontend\n\nexport const microAlgosToString = (num) => {\n\n    if (!num) return\n\n    let bigNumber = new BigNumber(num)\n\n    return bigNumber.shiftedBy(-ALGORAND_DECIMALS).toFixed(3);\n\n}\n\n\n// Convert an amount entered as algos (e.g. 10.5) to microAlgos (e.g. 10500)\n\nexport const stringToMicroAlgos = (str) => {\n\n    if (!str) return\n\n    let bigNumber = new BigNumber(str)\n\n    return bigNumber.shiftedBy(ALGORAND_DECIMALS).toNumber();\n\n}","import algosdk from \"algosdk\";\n\nimport {\n\n    algodClient,\n\n    indexerClient,\n\n    marketplaceNote,\n\n    minRound,\n\n    myAlgoConnect,\n\n    numGlobalBytes,\n\n    numGlobalInts,\n\n    numLocalBytes,\n\n    numLocalInts\n\n} from \"./constants\";\n\n/* eslint import/no-webpack-loader-syntax: off */\n\nimport approvalProgram from \"!!raw-loader!../contracts/marketplace_approval.teal\";\n\nimport clearProgram from \"!!raw-loader!../contracts/marketplace_clear.teal\";\n\n/* eslint-disable import/no-unresolved */\nimport { base64ToUTF8String, utf8ToBase64String } from './conversions';\n\n\nglobal.Buffer = global.Buffer || require('buffer').Buffer\n\n\nclass Product {\n\n    constructor(name, image, description, price, sold, appId, owner) {\n\n        this.name = name;\n\n        this.image = image;\n\n        this.description = description;\n\n        this.price = price;\n\n        this.sold = sold;\n\n        this.appId = appId;\n\n        this.owner = owner;\n\n    }\n\n}\n\n// Compile smart contract in .teal format to program\n\nconst compileProgram = async (programSource) => {\n\n    let encoder = new TextEncoder();\n\n    let programBytes = encoder.encode(programSource);\n\n    let compileResponse = await algodClient.compile(programBytes).do();\n\n    return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\n\n}\n\n\n// CREATE PRODUCT: ApplicationCreateTxn\n\nexport const createProductAction = async (senderAddress, product) => {\n\n    console.log(\"Adding product...\")\n\n\n    if(product.image?.length > 30) {\n\n        throw new Error(\"Image text is too long. Try a shorter url\")\n\n    }\n\n\n    let params = await algodClient.getTransactionParams().do();\n\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\n\n    params.flatFee = true;\n\n\n    // Compile programs\n\n    const compiledApprovalProgram = await compileProgram(approvalProgram)\n\n    const compiledClearProgram = await compileProgram(clearProgram)\n\n\n    // Build note to identify transaction later and required app args as Uint8Arrays\n\n    let note = new TextEncoder().encode(marketplaceNote);\n\n    let name = new TextEncoder().encode(product.name);\n\n    let image = new TextEncoder().encode(product.image);\n\n    let description = new TextEncoder().encode(product.description);\n\n    let price = algosdk.encodeUint64(product.price);\n\n\n    let appArgs = [name, image, description, price]\n\n\n    // Create ApplicationCreateTxn\n\n    let txn = algosdk.makeApplicationCreateTxnFromObject({\n\n        from: senderAddress,\n\n        suggestedParams: params,\n\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\n\n        approvalProgram: compiledApprovalProgram,\n\n        clearProgram: compiledClearProgram,\n\n        numLocalInts: numLocalInts,\n\n        numLocalByteSlices: numLocalBytes,\n\n        numGlobalInts: numGlobalInts,\n\n        numGlobalByteSlices: numGlobalBytes,\n\n        note: note,\n\n        appArgs: appArgs\n\n    });\n\n\n    // Get transaction ID\n\n    let txId = txn.txID().toString();\n\n\n    // Sign & submit the transaction\n\n    let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\n\n    console.log(\"Signed transaction with txID: %s\", txId);\n\n    await algodClient.sendRawTransaction(signedTxn.blob).do();\n\n\n    // Wait for transaction to be confirmed\n\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\n\n\n    // Get the completed Transaction\n\n    console.log(\"Transaction \" + txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n\n\n    // Get created application id and notify about completion\n\n    let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n\n    let appId = transactionResponse['application-index'];\n\n    console.log(\"Created new app-id: \", appId);\n\n    return appId;\n\n}\n\n//BUY PRODUCT: Group transaction consisting of ApplicationCallTxn and PaymentTxn\n\nexport const buyProductAction = async (senderAddress, product, count) => {\n\n    console.log(\"Buying product...\");\n\n\n    let params = await algodClient.getTransactionParams().do();\n\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\n\n    params.flatFee = true;\n\n\n    // Build required app args as Uint8Array\n\n    let buyArg = new TextEncoder().encode(\"buy\")\n\n    let countArg = algosdk.encodeUint64(count);\n\n    let appArgs = [buyArg, countArg]\n\n\n    // Create ApplicationCallTxn\n\n    let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n\n        from: senderAddress,\n\n        appIndex: product.appId,\n\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\n\n        suggestedParams: params,\n\n        appArgs: appArgs\n\n    })\n\n\n    // Create PaymentTxn\n\n    let paymentTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n\n        from: senderAddress,\n\n        to: product.owner,\n\n        amount: product.price * count,\n\n        suggestedParams: params\n\n    })\n\n\n    let txnArray = [appCallTxn, paymentTxn]\n\n\n    // Create group transaction out of previously build transactions\n\n    let groupID = algosdk.computeGroupID(txnArray)\n\n    for (let i = 0; i < 2; i++) txnArray[i].group = groupID;\n\n\n    // Sign & submit the group transaction\n\n    let signedTxn = await myAlgoConnect.signTransaction(txnArray.map(txn => txn.toByte()));\n\n    console.log(\"Signed group transaction\");\n\n    let tx = await algodClient.sendRawTransaction(signedTxn.map(txn => txn.blob)).do();\n\n\n    // Wait for group transaction to be confirmed\n\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, tx.txId, 4);\n\n\n    // Notify about completion\n\n    console.log(\"Group transaction \" + tx.txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n\n}\n\n// DELETE PRODUCT: ApplicationDeleteTxn\n\nexport const deleteProductAction = async (senderAddress, index) => {\n\n    console.log(\"Deleting application...\");\n\n\n    let params = await algodClient.getTransactionParams().do();\n\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\n\n    params.flatFee = true;\n\n\n    // Create ApplicationDeleteTxn\n\n    let txn = algosdk.makeApplicationDeleteTxnFromObject({\n\n        from: senderAddress, suggestedParams: params, appIndex: index,\n\n    });\n\n\n    // Get transaction ID\n\n    let txId = txn.txID().toString();\n\n\n    // Sign & submit the transaction\n\n    let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\n\n    console.log(\"Signed transaction with txID: %s\", txId);\n\n    await algodClient.sendRawTransaction(signedTxn.blob).do();\n\n\n    // Wait for transaction to be confirmed\n\n    const confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\n\n\n    // Get the completed Transaction\n\n    console.log(\"Transaction \" + txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n\n\n    // Get application id of deleted application and notify about completion\n\n    let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n\n    let appId = transactionResponse['txn']['txn'].apid;\n\n    console.log(\"Deleted app-id: \", appId);\n\n}\n\n//...\n\n// GET PRODUCTS: Use indexer\n\nexport const getProductsAction = async () => {\n\n    console.log(\"Fetching products...\")\n\n    let note = new TextEncoder().encode(marketplaceNote);\n\n    let encodedNote = Buffer.from(note).toString(\"base64\");\n\n\n    // Step 1: Get all transactions by notePrefix (+ minRound filter for performance)\n\n    let transactionInfo = await indexerClient.searchForTransactions()\n\n        .notePrefix(encodedNote)\n\n        .txType(\"appl\")\n\n        .minRound(minRound)\n\n        .do();\n\n    let products = []\n\n    for (const transaction of transactionInfo.transactions) {\n\n        let appId = transaction[\"created-application-index\"]\n\n        if (appId) {\n\n            // Step 2: Get each application by application id\n\n            let product = await getApplication(appId)\n\n            if (product) {\n\n                products.push(product)\n\n            }\n\n        }\n\n    }\n\n    console.log(\"Products fetched.\")\n\n    return products\n\n}\n\n\nconst getApplication = async (appId) => {\n\n    try {\n\n        // 1. Get application by appId\n\n        let response = await indexerClient.lookupApplications(appId).includeAll(true).do();\n\n        if (response.application.deleted) {\n\n            return null;\n\n        }\n\n        let globalState = response.application.params[\"global-state\"]\n\n\n        // 2. Parse fields of response and return product\n\n        let owner = response.application.params.creator\n\n        let name = \"\"\n\n        let image = \"\"\n\n        let description = \"\"\n\n        let price = 0\n\n        let sold = 0\n\n\n        const getField = (fieldName, globalState) => {\n\n            return globalState.find(state => {\n\n                return state.key === utf8ToBase64String(fieldName);\n\n            })\n\n        }\n\n\n        if (getField(\"NAME\", globalState) !== undefined) {\n\n            let field = getField(\"NAME\", globalState).value.bytes\n\n            name = base64ToUTF8String(field)\n\n        }\n\n\n        if (getField(\"IMAGE\", globalState) !== undefined) {\n\n            let field = getField(\"IMAGE\", globalState).value.bytes\n\n            image = base64ToUTF8String(field)\n\n        }\n\n\n        if (getField(\"DESCRIPTION\", globalState) !== undefined) {\n\n            let field = getField(\"DESCRIPTION\", globalState).value.bytes\n\n            description = base64ToUTF8String(field)\n\n        }\n\n\n        if (getField(\"PRICE\", globalState) !== undefined) {\n\n            price = getField(\"PRICE\", globalState).value.uint\n\n        }\n\n\n        if (getField(\"SOLD\", globalState) !== undefined) {\n\n            sold = getField(\"SOLD\", globalState).value.uint\n\n        }\n\n\n        return new Product(name, image, description, price, sold, appId, owner)\n\n    } catch (err) {\n\n        return null;\n\n    }\n\n}\n","export default \"#pragma version 6\\ntxn ApplicationID\\nint 0\\n==\\nbnz main_l8\\ntxn OnCompletion\\nint DeleteApplication\\n==\\nbnz main_l7\\ntxna ApplicationArgs 0\\nbyte \\\"buy\\\"\\n==\\nbnz main_l4\\nerr\\nmain_l4:\\nglobal GroupSize\\nint 2\\n==\\ngtxn 1 TypeEnum\\nint pay\\n==\\ngtxn 1 Receiver\\nglobal CreatorAddress\\n==\\n&&\\ngtxn 1 Amount\\nbyte \\\"PRICE\\\"\\napp_global_get\\ntxna ApplicationArgs 1\\nbtoi\\n*\\n==\\n&&\\ngtxn 1 Sender\\ngtxn 0 Sender\\n==\\n&&\\n&&\\nbnz main_l6\\nint 0\\nreturn\\nmain_l6:\\nbyte \\\"SOLD\\\"\\nbyte \\\"SOLD\\\"\\napp_global_get\\ntxna ApplicationArgs 1\\nbtoi\\n+\\napp_global_put\\nint 1\\nreturn\\nmain_l7:\\ntxn Sender\\nglobal CreatorAddress\\n==\\nreturn\\nmain_l8:\\ntxn NumAppArgs\\nint 4\\n==\\nassert\\ntxn Note\\nbyte \\\"tutorial-marketplace:uv1\\\"\\n==\\nassert\\ntxna ApplicationArgs 3\\nbtoi\\nint 0\\n>\\nassert\\nbyte \\\"NAME\\\"\\ntxna ApplicationArgs 0\\napp_global_put\\nbyte \\\"IMAGE\\\"\\ntxna ApplicationArgs 1\\napp_global_put\\nbyte \\\"DESCRIPTION\\\"\\ntxna ApplicationArgs 2\\napp_global_put\\nbyte \\\"PRICE\\\"\\ntxna ApplicationArgs 3\\nbtoi\\napp_global_put\\nbyte \\\"SOLD\\\"\\nint 0\\napp_global_put\\nint 1\\nreturn\";","export default \"#pragma version 6\\nint 1\\nreturn\";","import algosdk from \"algosdk\";\n\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\n\n\nconst config = {\n\n    algodToken: \"\",\n\n    algodServer: \"https://testnet-api.algonode.network\",\n\n    algodPort: \"\",\n\n    indexerToken: \"\",\n\n    indexerServer: \"https://testnet-idx.algonode.network\",\n\n    indexerPort: \"\",\n\n}\n\n\nexport const algodClient = new algosdk.Algodv2(config.algodToken, config.algodServer, config.algodPort)\n\n\nexport const indexerClient = new algosdk.Indexer(config.indexerToken, config.indexerServer, config.indexerPort);\nexport const minRound = 29556983;\n\n\n// https://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0002.md\n\nexport const marketplaceNote = \"tutorial-marketplace:uv1\"\n\n\n// Maximum local storage allocation, immutable\n\nexport const numLocalInts = 0;\nexport const ALGORAND_DECIMALS = 6;\nexport const numLocalBytes = 0;\n\n// Maximum global storage allocation, immutable\n\nexport const numGlobalInts = 2; // Global variables stored as Int: count, sold\n\nexport const numGlobalBytes = 3; // Global variables stored as Bytes: name, description, image\n\nexport const myAlgoConnect = new MyAlgoConnect({\n\n    timeout: 100000000,\n\n});","import React from 'react';\n\nimport {Button} from \"react-bootstrap\";\n\nimport PropTypes from 'prop-types';\n\n\nconst Cover = ({name, coverImg, connect}) => {\n\n    return (\n\n        <div className=\"d-flex justify-content-center flex-column text-center bg-black min-vh-100\">\n\n            <div className=\"mt-auto text-light mb-5\">\n\n                <div\n\n                    className=\" ratio ratio-1x1 mx-auto mb-2\"\n\n                    style={{maxWidth: \"320px\"}}\n\n                >\n\n                    <img src={coverImg} alt=\"\"/>\n\n                </div>\n\n                <h1>{name}</h1>\n\n                <p>Please connect your wallet to continue.</p>\n\n                <Button\n\n                    onClick={() => connect()}\n\n                    variant=\"outline-light\"\n\n                    className=\"rounded-pill px-3 mt-3\"\n\n                >\n\n                    Connect Wallet\n\n                </Button>\n\n            </div>\n\n            <p className=\"mt-auto text-secondary\">Powered by Algorand</p>\n\n        </div>\n\n    );\n\n};\n\n\nCover.propTypes = {\n\n    name: PropTypes.string,\n\n    coverImg: PropTypes.string,\n\n    connect: PropTypes.func\n\n};\n\n\nexport default Cover;","import Identicon from 'react-identicons';\n\nimport PropTypes from \"prop-types\";\n\n\nconst AddressIdenticon = ({size, address, ...rest}) => (\n\n    <div {...rest} style={{width: `${size}px`, height: `${size}px`}}>\n\n        <Identicon string={address} size={30}  />\n\n    </div>\n\n);\n\n\nIdenticon.propTypes = {\n\n    size: PropTypes.number.isRequired,\n\n    address: PropTypes.string.isRequired\n\n};\n\n\nexport default AddressIdenticon;","import React from 'react';\n\nimport {Dropdown, Spinner, Stack} from 'react-bootstrap';\n\nimport {microAlgosToString, truncateAddress} from '../utils/conversions';\n\nimport Identicon from './utils/Identicon'\n\nimport PropTypes from \"prop-types\";\n\n\nconst Wallet = ({address, name, amount, symbol, disconnect}) => {\n\n    if (!address) {\n\n        return null;\n\n    }\n\n    return (\n\n        <>\n\n            <Dropdown>\n\n                <Dropdown.Toggle variant=\"light\" align=\"end\" id=\"dropdown-basic\"\n\n                                 className=\"d-flex align-items-center border rounded-pill py-1\">\n\n                    {amount ? (\n\n                        <>\n\n                            {microAlgosToString(amount)}\n\n                            <span className=\"ms-1\"> {symbol}</span>\n\n                        </>\n\n                    ) : (\n\n                        <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\"/>\n\n                    )}\n\n                    <Identicon address={address} size={28} className=\"ms-2 me-1\"/>\n\n                </Dropdown.Toggle>\n\n\n                <Dropdown.Menu className=\"shadow-lg border-0\">\n\n                    <Dropdown.Item href={`https://testnet.algoexplorer.io/address/${address}`}\n\n                                   target=\"_blank\">\n\n                        <Stack direction=\"horizontal\" gap={2}>\n\n                            <i className=\"bi bi-person-circle fs-4\"/>\n\n                            <div className=\"d-flex flex-column\">\n\n                                {name && (<span className=\"font-monospace\">{name}</span>)}\n\n                                <span className=\"font-monospace\">{truncateAddress(address)}</span>\n\n                            </div>\n\n                        </Stack>\n\n                    </Dropdown.Item>\n\n                    <Dropdown.Divider/>\n\n                    <Dropdown.Item as=\"button\" className=\"d-flex align-items-center\" onClick={() => {\n\n                        disconnect();\n\n                    }}>\n\n                        <i className=\"bi bi-box-arrow-right me-2 fs-4\"/>\n\n                        Disconnect\n\n                    </Dropdown.Item>\n\n                </Dropdown.Menu>\n\n            </Dropdown>\n\n        </>\n\n    )\n\n};\n\n\nWallet.propTypes = {\n\n    address: PropTypes.string,\n\n    name: PropTypes.string,\n\n    amount: PropTypes.number,\n\n    symbol: PropTypes.string,\n\n    disconnect: PropTypes.func\n\n};\n\n\nexport default Wallet;","import React, {useCallback, useState} from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nimport {Button, FloatingLabel, Form, Modal} from \"react-bootstrap\";\n\nimport {stringToMicroAlgos} from \"../../utils/conversions\";\n\n\nconst AddProduct = ({createProduct}) => {\n\n    const [name, setName] = useState(\"\");\n\n    const [image, setImage] = useState(\"\");\n\n    const [description, setDescription] = useState(\"\");\n\n    const [price, setPrice] = useState(0);\n\n\n    const isFormFilled = useCallback(() => {\n\n        return name && image && description && price > 0\n\n    }, [name, image, description, price]);\n\n\n    const [show, setShow] = useState(false);\n\n\n    const handleClose = () => setShow(false);\n\n    const handleShow = () => setShow(true);\n\n//...\n//...\n\nreturn (\n\n    <>\n\n        <Button\n\n            onClick={handleShow}\n\n            variant=\"dark\"\n\n            className=\"rounded-pill px-0\"\n\n            style={{width: \"38px\"}}\n\n        >\n\n            <i className=\"bi bi-plus\"></i>\n\n        </Button>\n\n        <Modal show={show} onHide={handleClose} centered>\n\n            <Modal.Header closeButton>\n\n                <Modal.Title>New Product</Modal.Title>\n\n            </Modal.Header>\n\n            <Form>\n\n                <Modal.Body>\n\n                    <FloatingLabel\n\n                        controlId=\"inputName\"\n\n                        label=\"Product name\"\n\n                        className=\"mb-3\"\n\n                    >\n\n                        <Form.Control\n\n                            type=\"text\"\n\n                            onChange={(e) => {\n\n                                setName(e.target.value);\n\n                            }}\n\n                            placeholder=\"Enter name of product\"\n\n                        />\n\n                    </FloatingLabel>\n\n                    <FloatingLabel\n\n                        controlId=\"inputUrl\"\n\n                        label=\"Image URL\"\n\n                        className=\"mb-3\"\n\n                    >\n\n                        <Form.Control\n\n                            type=\"text\"\n\n                            placeholder=\"Image URL\"\n\n                            value={image}\n\n                            onChange={(e) => {\n\n                                setImage(e.target.value);\n\n                            }}\n\n                        />\n\n                    </FloatingLabel>\n\n                    <FloatingLabel\n\n                        controlId=\"inputDescription\"\n\n                        label=\"Description\"\n\n                        className=\"mb-3\"\n\n                    >\n\n                        <Form.Control\n\n                            as=\"textarea\"\n\n                            placeholder=\"description\"\n\n                            style={{ height: \"80px\" }}\n\n                            onChange={(e) => {\n\n                                setDescription(e.target.value);\n\n                            }}\n\n                        />\n\n                    </FloatingLabel>\n\n                    <FloatingLabel\n\n                        controlId=\"inputPrice\"\n\n                        label=\"Price in ALGO\"\n\n                        className=\"mb-3\"\n\n                    >\n\n                        <Form.Control\n\n                            type=\"text\"\n\n                            placeholder=\"Price\"\n\n                            onChange={(e) => {\n\n                                setPrice(stringToMicroAlgos(e.target.value));\n\n                            }}\n\n                        />\n\n                    </FloatingLabel>\n\n                </Modal.Body>\n\n            </Form>\n\n            <Modal.Footer>\n\n                <Button variant=\"outline-secondary\" onClick={handleClose}>\n\n                    Close\n\n                </Button>\n\n                <Button\n\n                    variant=\"dark\"\n\n                    disabled={!isFormFilled()}\n\n                    onClick={() => {\n\n                        createProduct({\n\n                            name,\n\n                            image,\n\n                            description,\n\n                            price\n\n                        });\n\n                        handleClose();\n\n                    }}\n\n                >\n\n                    Save product\n\n                </Button>\n\n            </Modal.Footer>\n\n        </Modal>\n\n    </>\n\n);\n\n};\n\n\nAddProduct.propTypes = {\n\ncreateProduct: PropTypes.func.isRequired,\n\n};\n\n\nexport default AddProduct;\n","import React, {useState} from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nimport {Badge, Button, Card, Col, FloatingLabel, Form, Stack} from \"react-bootstrap\";\n\nimport {microAlgosToString, truncateAddress} from \"../../utils/conversions\";\n\nimport Identicon from \"../utils/Identicon\";\n\n\nconst Product = ({address, product, buyProduct, deleteProduct}) => {\n\n    const {name, image, description, price, sold, appId, owner} =\n\n        product;\n\n\n    const [count, setCount] = useState(1)\n\n\n    return (\n\n        <Col key={appId}>\n\n            <Card className=\"h-100\">\n\n                <Card.Header>\n\n                    <Stack direction=\"horizontal\" gap={2}>\n\n                        <span className=\"font-monospace text-secondary\">{truncateAddress(owner)}</span>\n\n                        <Identicon size={28} address={owner}/>\n\n                        <Badge bg=\"secondary\" className=\"ms-auto\">\n\n                            {sold} Sold\n\n                        </Badge>\n\n                    </Stack>\n\n                </Card.Header>\n\n                <div className=\"ratio ratio-4x3\">\n\n                    <img src={image} alt={name} style={{objectFit: \"cover\"}}/>\n\n                </div>\n\n                <Card.Body className=\"d-flex flex-column text-center\">\n\n                    <Card.Title>{name}</Card.Title>\n\n                    <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\n\n                    <Form className=\"d-flex align-content-stretch flex-row gap-2\">\n\n                        <FloatingLabel\n\n                            controlId=\"inputCount\"\n\n                            label=\"Count\"\n\n                            className=\"w-25\"\n\n                        >\n\n                            <Form.Control\n\n                                type=\"number\"\n\n                                value={count}\n\n                                min=\"1\"\n\n                                max=\"10\"\n\n                                onChange={(e) => {\n\n                                    setCount(Number(e.target.value));\n\n                                }}\n\n                            />\n\n                        </FloatingLabel>\n\n                        <Button\n\n                            variant=\"outline-dark\"\n\n                            onClick={() => buyProduct(product, count)}\n\n                            className=\"w-75 py-3\"\n\n                        >\n\n                            Buy for {microAlgosToString(price) * count} ALGO\n\n                        </Button>\n\n                        {product.owner === address &&\n\n                            <Button\n\n                                variant=\"outline-danger\"\n\n                                onClick={() => deleteProduct(product)}\n\n                                className=\"btn\"\n\n                            >\n\n                                <i className=\"bi bi-trash\"></i>\n\n                            </Button>\n\n                        }\n\n                    </Form>\n\n                </Card.Body>\n\n            </Card>\n\n        </Col>\n\n    );\n\n};\n\n\nProduct.propTypes = {\n\n    address: PropTypes.string.isRequired,\n\n    product: PropTypes.instanceOf(Object).isRequired,\n\n    buyProduct: PropTypes.func.isRequired,\n\n    deleteProduct: PropTypes.func.isRequired\n\n};\n\n\nexport default Product;\n","import React from \"react\";\n\nimport {Spinner} from \"react-bootstrap\";\n\n\nconst Loader = () => (\n\n    <div className=\"d-flex justify-content-center\">\n\n        <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n\n            <span className=\"visually-hidden\">Loading...</span>\n\n        </Spinner>\n\n    </div>\n\n);\n\n\nexport default Loader;","import React from \"react\";\n\nimport {ToastContainer} from \"react-toastify\";\n\nimport PropTypes from \"prop-types\";\n\n\nconst Notification = () => (\n\n    <ToastContainer\n\n        position=\"bottom-center\"\n\n        autoClose={5000}\n\n        hideProgressBar\n\n        newestOnTop\n\n        closeOnClick\n\n        rtl={false}\n\n        pauseOnFocusLoss\n\n        draggable={false}\n\n        pauseOnHover\n\n    />\n\n);\n\n\nconst NotificationSuccess = ({text}) => (\n\n    <div>\n\n        <i className=\"bi bi-check-circle-fill text-success mx-2\"/>\n\n        <span className=\"text-secondary mx-1\">{text}</span>\n\n    </div>\n\n);\n\n\nconst NotificationError = ({text}) => (\n\n    <div>\n\n        <i className=\"bi bi-x-circle-fill text-danger mx-2\"/>\n\n        <span className=\"text-secondary mx-1\">{text}</span>\n\n    </div>\n\n);\n\n\nconst Props = {\n\n    text: PropTypes.string,\n\n};\n\n\nconst DefaultProps = {\n\n    text: \"\",\n\n};\n\n\nNotificationSuccess.propTypes = Props;\n\nNotificationSuccess.defaultProps = DefaultProps;\n\n\nNotificationError.propTypes = Props;\n\nNotificationError.defaultProps = DefaultProps;\n\n\nexport {Notification, NotificationSuccess, NotificationError};","import React, {useEffect, useState} from \"react\";\n\nimport {toast} from \"react-toastify\";\n\nimport AddProduct from \"./AddProduct\";\n\nimport Product from \"./Product\";\n\nimport Loader from \"../utils/Loader\";\n\nimport {NotificationError, NotificationSuccess} from \"../utils/Notifications\";\n\nimport {buyProductAction, createProductAction, deleteProductAction, getProductsAction,} from \"../../utils/marketplace\";\n\nimport PropTypes from \"prop-types\";\n\nimport {Row} from \"react-bootstrap\";\n\n//...\n\n//...\n\nconst Products = ({address, fetchBalance}) => {\n\n    const [products, setProducts] = useState([]);\n\n    const [loading, setLoading] = useState(false);\n\n\n    const getProducts = async () => {\n\n      try {\n\n        setLoading(true);\n\n        const products = await getProductsAction()\n\n        if (!products) {\n\n          return\n\n        }\n\n  \n\n        setProducts(products);\n\n      } catch (e) {\n\n        console.log({e})\n\n      } finally {\n\n        setLoading(false);\n\n      }\n\n    };\n\n\n\n  useEffect(() => {\n\n        getProducts();\n\n    }, []);\n\n//...\n\n//...\n\nconst createProduct = async (data) => {\n\n    try {\n\n      setLoading(true);\n\n      await createProductAction(address, data);\n\n      toast(<NotificationSuccess text=\"Product added successfully.\"/>);\n\n      await getProducts();\n\n      await fetchBalance(address);\n\n    } catch (error) {\n\n      console.log(error);\n\n      toast(<NotificationError text={error?.message || \"Failed to create a product.\"}/>);\n\n    }finally {\n\n      setLoading(false);\n\n    }\n\n  };\n\n//...\n\n//...\n\nconst buyProduct = async (product, count) => {\n\n    try {\n\n      setLoading(true);\n\n      await buyProductAction(address, product, count);\n\n      toast(<NotificationSuccess text=\"Product bought successfully\"/>);\n\n      getProducts();\n\n      fetchBalance(address);\n\n    } catch (error) {\n\n      console.log(error)\n\n      toast(<NotificationError text=\"Failed to purchase product.\"/>);\n\n    } finally {\n\n      setLoading(false);\n\n    }\n\n  };\n\n//...\n\n//...\n\nconst deleteProduct = async (product) => {\n\n    try {\n\n      setLoading(true);\n\n      await deleteProductAction(address, product.appId);\n\n      toast(<NotificationSuccess text=\"Product deleted successfully\"/>);\n\n      getProducts();\n\n      fetchBalance(address);\n\n    } catch (error) {\n\n      console.log(error)\n\n      toast(<NotificationError text=\"Failed to delete product.\"/>);\n\n    } finally {\n\n      setLoading(false);\n\n    }\n\n};\n\n//...\n\n//...\n\nif (loading) {\n\n    return <Loader/>;\n\n}\n\nreturn (\n\n    <>\n\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\n\n            <h1 className=\"fs-4 fw-bold mb-0\">Street Food</h1>\n\n            <AddProduct createProduct={createProduct}/>\n\n        </div>\n\n        <Row xs={1} sm={2} lg={3} className=\"g-3 mb-5 g-xl-4 g-xxl-5\">\n\n            <>\n\n                {products.map((product, index) => (\n\n                    <Product\n\n                        address={address}\n\n                        product={product}\n\n                        buyProduct={buyProduct}\n\n                        deleteProduct={deleteProduct}\n\n                        key={index}\n\n                    />\n\n                ))}\n\n            </>\n\n        </Row>\n\n    </>\n\n);\n\n};\n\n\nProducts.propTypes = {\n\naddress: PropTypes.string.isRequired,\n\nfetchBalance: PropTypes.func.isRequired\n\n};\n\n\nexport default Products;","export default __webpack_public_path__ + \"static/media/sandwich.2d312449.jpg\";","import React, {useState} from \"react\";\n\nimport Cover from \"./components/Cover\";\n\nimport './App.css';\n\nimport Wallet from \"./components/Wallet\";\n\nimport {Container, Nav} from \"react-bootstrap\";\n\nimport Products from \"./components/marketplace/Products\";\n\nimport {Notification} from \"./components/utils/Notifications\";\n\nimport {indexerClient, myAlgoConnect} from \"./utils/constants\";\n\nimport coverImg from \"./assets/img/sandwich.jpg\"\n\n//..\n\nconst App = function AppWrapper() {\n\n\n    const [address, setAddress] = useState(null);\n\n    const [name, setName] = useState(null);\n\n    const [balance, setBalance] = useState(0);\n\n\n    const fetchBalance = async (accountAddress) => {\n\n        indexerClient.lookupAccountByID(accountAddress).do()\n\n            .then(response => {\n\n                const _balance = response.account.amount;\n\n                setBalance(_balance);\n\n            })\n\n            .catch(error => {\n\n                console.log(error);\n\n            });\n\n    };\n\n\n    const connectWallet = async () => {\n\n        myAlgoConnect.connect()\n\n            .then(accounts => {\n\n                const _account = accounts[0];\n\n                setAddress(_account.address);\n\n                setName(_account.name);\n\n                fetchBalance(_account.address);\n\n            }).catch(error => {\n\n            console.log('Could not connect to MyAlgo wallet');\n\n            console.error(error);\n\n        })\n\n    };\n\n\n    const disconnect = () => {\n\n        setAddress(null);\n\n        setName(null);\n\n        setBalance(null);\n\n    };\n\n    return (\n\n        <>\n\n            {<Notification /> }\n\n            {address ? (\n\n                <Container fluid=\"md\">\n\n                    <Nav className=\"justify-content-end pt-3 pb-5\">\n\n                        <Nav.Item>\n\n                            <Wallet\n\n                                address={address}\n\n                                name={name}\n\n                                amount={balance}\n\n                                disconnect={disconnect}\n\n                                symbol={\"ALGO\"}\n\n                            />\n\n                        </Nav.Item>\n\n                    </Nav>\n\n                    <main>\n\n                        {<Products address={address} fetchBalance={fetchBalance}/> }\n\n                    </main>\n\n                </Container>\n\n            ) : (\n\n                <Cover name={\"Street Food\"} coverImg={coverImg} connect={connectWallet}/>\n\n            )}\n\n        </>\n\n    );\n\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n\n    <React.StrictMode>\n\n        <App/>\n\n    </React.StrictMode>,\n\n    document.getElementById('root'),\n\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n\n// to log results (for example: reportWebVitals(console.log))\n\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}